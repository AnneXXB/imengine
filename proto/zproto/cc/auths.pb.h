// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auths.proto

#ifndef PROTOBUF_auths_2eproto__INCLUDED
#define PROTOBUF_auths_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace zproto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_auths_2eproto();
void protobuf_AssignDesc_auths_2eproto();
void protobuf_ShutdownFile_auths_2eproto();

class UserTokenAuthReq;
class UserTokenAuthRsp;

// ===================================================================

class UserTokenAuthReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.UserTokenAuthReq) */ {
 public:
  UserTokenAuthReq();
  virtual ~UserTokenAuthReq();

  UserTokenAuthReq(const UserTokenAuthReq& from);

  inline UserTokenAuthReq& operator=(const UserTokenAuthReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserTokenAuthReq& default_instance();

  void Swap(UserTokenAuthReq* other);

  // implements Message ----------------------------------------------

  inline UserTokenAuthReq* New() const { return New(NULL); }

  UserTokenAuthReq* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserTokenAuthReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string app_key = 1;
  void clear_app_key();
  static const int kAppKeyFieldNumber = 1;
  const ::std::string& app_key() const;
  void set_app_key(const ::std::string& value);
  void set_app_key(const char* value);
  void set_app_key(const char* value, size_t size);
  ::std::string* mutable_app_key();
  ::std::string* release_app_key();
  void set_allocated_app_key(::std::string* app_key);

  // optional string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string user_token = 3;
  void clear_user_token();
  static const int kUserTokenFieldNumber = 3;
  const ::std::string& user_token() const;
  void set_user_token(const ::std::string& value);
  void set_user_token(const char* value);
  void set_user_token(const char* value, size_t size);
  ::std::string* mutable_user_token();
  ::std::string* release_user_token();
  void set_allocated_user_token(::std::string* user_token);

  // @@protoc_insertion_point(class_scope:zproto.UserTokenAuthReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr app_key_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr user_token_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_auths_2eproto();
  friend void protobuf_AssignDesc_auths_2eproto();
  friend void protobuf_ShutdownFile_auths_2eproto();

  void InitAsDefaultInstance();
  static UserTokenAuthReq* default_instance_;
};
// -------------------------------------------------------------------

class UserTokenAuthRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.UserTokenAuthRsp) */ {
 public:
  UserTokenAuthRsp();
  virtual ~UserTokenAuthRsp();

  UserTokenAuthRsp(const UserTokenAuthRsp& from);

  inline UserTokenAuthRsp& operator=(const UserTokenAuthRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserTokenAuthRsp& default_instance();

  void Swap(UserTokenAuthRsp* other);

  // implements Message ----------------------------------------------

  inline UserTokenAuthRsp* New() const { return New(NULL); }

  UserTokenAuthRsp* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserTokenAuthRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 app_id = 1;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  ::google::protobuf::uint32 app_id() const;
  void set_app_id(::google::protobuf::uint32 value);

  // optional string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string nick = 3;
  void clear_nick();
  static const int kNickFieldNumber = 3;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // optional string avatar = 4;
  void clear_avatar();
  static const int kAvatarFieldNumber = 4;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // @@protoc_insertion_point(class_scope:zproto.UserTokenAuthRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr avatar_;
  ::google::protobuf::uint32 app_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_auths_2eproto();
  friend void protobuf_AssignDesc_auths_2eproto();
  friend void protobuf_ShutdownFile_auths_2eproto();

  void InitAsDefaultInstance();
  static UserTokenAuthRsp* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UserTokenAuthReq

// optional string app_key = 1;
inline void UserTokenAuthReq::clear_app_key() {
  app_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserTokenAuthReq::app_key() const {
  // @@protoc_insertion_point(field_get:zproto.UserTokenAuthReq.app_key)
  return app_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserTokenAuthReq::set_app_key(const ::std::string& value) {
  
  app_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.UserTokenAuthReq.app_key)
}
inline void UserTokenAuthReq::set_app_key(const char* value) {
  
  app_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.UserTokenAuthReq.app_key)
}
inline void UserTokenAuthReq::set_app_key(const char* value, size_t size) {
  
  app_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.UserTokenAuthReq.app_key)
}
inline ::std::string* UserTokenAuthReq::mutable_app_key() {
  
  // @@protoc_insertion_point(field_mutable:zproto.UserTokenAuthReq.app_key)
  return app_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserTokenAuthReq::release_app_key() {
  // @@protoc_insertion_point(field_release:zproto.UserTokenAuthReq.app_key)
  
  return app_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserTokenAuthReq::set_allocated_app_key(::std::string* app_key) {
  if (app_key != NULL) {
    
  } else {
    
  }
  app_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_key);
  // @@protoc_insertion_point(field_set_allocated:zproto.UserTokenAuthReq.app_key)
}

// optional string user_id = 2;
inline void UserTokenAuthReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserTokenAuthReq::user_id() const {
  // @@protoc_insertion_point(field_get:zproto.UserTokenAuthReq.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserTokenAuthReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.UserTokenAuthReq.user_id)
}
inline void UserTokenAuthReq::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.UserTokenAuthReq.user_id)
}
inline void UserTokenAuthReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.UserTokenAuthReq.user_id)
}
inline ::std::string* UserTokenAuthReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.UserTokenAuthReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserTokenAuthReq::release_user_id() {
  // @@protoc_insertion_point(field_release:zproto.UserTokenAuthReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserTokenAuthReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.UserTokenAuthReq.user_id)
}

// optional string user_token = 3;
inline void UserTokenAuthReq::clear_user_token() {
  user_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserTokenAuthReq::user_token() const {
  // @@protoc_insertion_point(field_get:zproto.UserTokenAuthReq.user_token)
  return user_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserTokenAuthReq::set_user_token(const ::std::string& value) {
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.UserTokenAuthReq.user_token)
}
inline void UserTokenAuthReq::set_user_token(const char* value) {
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.UserTokenAuthReq.user_token)
}
inline void UserTokenAuthReq::set_user_token(const char* value, size_t size) {
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.UserTokenAuthReq.user_token)
}
inline ::std::string* UserTokenAuthReq::mutable_user_token() {
  
  // @@protoc_insertion_point(field_mutable:zproto.UserTokenAuthReq.user_token)
  return user_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserTokenAuthReq::release_user_token() {
  // @@protoc_insertion_point(field_release:zproto.UserTokenAuthReq.user_token)
  
  return user_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserTokenAuthReq::set_allocated_user_token(::std::string* user_token) {
  if (user_token != NULL) {
    
  } else {
    
  }
  user_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_token);
  // @@protoc_insertion_point(field_set_allocated:zproto.UserTokenAuthReq.user_token)
}

// -------------------------------------------------------------------

// UserTokenAuthRsp

// optional uint32 app_id = 1;
inline void UserTokenAuthRsp::clear_app_id() {
  app_id_ = 0u;
}
inline ::google::protobuf::uint32 UserTokenAuthRsp::app_id() const {
  // @@protoc_insertion_point(field_get:zproto.UserTokenAuthRsp.app_id)
  return app_id_;
}
inline void UserTokenAuthRsp::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.UserTokenAuthRsp.app_id)
}

// optional string user_id = 2;
inline void UserTokenAuthRsp::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserTokenAuthRsp::user_id() const {
  // @@protoc_insertion_point(field_get:zproto.UserTokenAuthRsp.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserTokenAuthRsp::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.UserTokenAuthRsp.user_id)
}
inline void UserTokenAuthRsp::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.UserTokenAuthRsp.user_id)
}
inline void UserTokenAuthRsp::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.UserTokenAuthRsp.user_id)
}
inline ::std::string* UserTokenAuthRsp::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.UserTokenAuthRsp.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserTokenAuthRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:zproto.UserTokenAuthRsp.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserTokenAuthRsp::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.UserTokenAuthRsp.user_id)
}

// optional string nick = 3;
inline void UserTokenAuthRsp::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserTokenAuthRsp::nick() const {
  // @@protoc_insertion_point(field_get:zproto.UserTokenAuthRsp.nick)
  return nick_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserTokenAuthRsp::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.UserTokenAuthRsp.nick)
}
inline void UserTokenAuthRsp::set_nick(const char* value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.UserTokenAuthRsp.nick)
}
inline void UserTokenAuthRsp::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.UserTokenAuthRsp.nick)
}
inline ::std::string* UserTokenAuthRsp::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:zproto.UserTokenAuthRsp.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserTokenAuthRsp::release_nick() {
  // @@protoc_insertion_point(field_release:zproto.UserTokenAuthRsp.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserTokenAuthRsp::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:zproto.UserTokenAuthRsp.nick)
}

// optional string avatar = 4;
inline void UserTokenAuthRsp::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserTokenAuthRsp::avatar() const {
  // @@protoc_insertion_point(field_get:zproto.UserTokenAuthRsp.avatar)
  return avatar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserTokenAuthRsp::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.UserTokenAuthRsp.avatar)
}
inline void UserTokenAuthRsp::set_avatar(const char* value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.UserTokenAuthRsp.avatar)
}
inline void UserTokenAuthRsp::set_avatar(const char* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.UserTokenAuthRsp.avatar)
}
inline ::std::string* UserTokenAuthRsp::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:zproto.UserTokenAuthRsp.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserTokenAuthRsp::release_avatar() {
  // @@protoc_insertion_point(field_release:zproto.UserTokenAuthRsp.avatar)
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserTokenAuthRsp::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:zproto.UserTokenAuthRsp.avatar)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_auths_2eproto__INCLUDED
