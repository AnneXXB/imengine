/*
 *  Copyright (c) 2016, https://github.com/wubenqi
 *  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package zproto;

option java_package = "com.zchat.engine.zproto";
option java_outer_classname = "ZProtoSequence";
option optimize_for = CODE_SIZE;

import "users.proto";
import "group_base.proto";
import "messaging_base.proto";

// Sequence and Updates

// Each device has it's own update sequence. At the begining application request initial sequence state by
// calling GetState. On each application restart or NewSessionCreated application calls GetDifference for receiving
// updates in update sequence.
// GetState and GetDifference automatically subscribes session to receiving updates in session.
// Each update has seq and state. Seq is sequental index of updated and used for detecting of holes in update sequence
// (because of server failure or session die) on client side.
// All updates needed to be processed in partucular order according to seq values.
// In some updates there can be references to users that are not available at client yer. In this case application need
// to ignore such update and init getting difference.

// Sequence update
message SeqUpdate {
  int32 seq = 1; //   Sequence number of update
  bytes state = 2; //   Sequece state of update
  int32 update_header = 3; //   header of update
  bytes update = 4; //   The update
}

// Fat sequence update with additional data
message FatSeqUpdate {
  int32 seq = 1; //   Sequence number of update
  bytes state = 2; //   Sequence state of update
  int32 update_header = 3; //   header of update
  bytes update = 4; //   The update
  repeated User users = 5; //   Users that are referenced in update
  repeated Group groups = 6; //   Groups that are referenced in update
}

// Out of sequence update (for typing and online statuses)
message WeakUpdate {
  int64 date = 1; //   Date of update
  int32 update_header = 2; //   Header of update
  bytes update = 3; //   The update
}

// Fat Weak Update
message WeakFatUpdate {
  int64 date = 1; //   Date of update
  int32 update_header = 2; //   Header of update
  bytes update = 3; //   The update
  repeated User users = 4; //   Users that are referenced in update
  repeated Group groups = 5; //   Groups that are referenced in update
}

// Notification about requiring performing manual GetDifference
message SeqUpdateTooLong {
}

// Update container
message UpdateContainer {
  int32 update_header = 1; //   Header of update
  bytes update = 2; //   The updatre
}

// Combined update
message CombinedUpdate {
  int32 seq_start = 1; //   Sequence number start
  int32 seq_end = 2; //   Sequence number end
  bytes state = 3; //   Sequence state
  repeated User users = 4; //   Update's users
  repeated Group groups = 5; //   Update's groups
  repeated UpdateContainer updates = 6; //   Updates (can be empty)
  repeated MessageContainer messages = 7; //   New messages
}

// UpdateOptimization
enum UpdateOptimization {
  NONE = 0;
  STRIP_ENTITIES = 1;
  ENABLE_COMBINED = 2;
  FASTER_MESSAGES = 3;
  STRIP_COUNTERS = 4;
  COMPACT_USERS = 5;
  GROUPS_V2 = 6;
}
