// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: users.proto

#ifndef PROTOBUF_users_2eproto__INCLUDED
#define PROTOBUF_users_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
#include "files.pb.h"
// @@protoc_insertion_point(includes)

namespace zproto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_users_2eproto();
void protobuf_AssignDesc_users_2eproto();
void protobuf_ShutdownFile_users_2eproto();

class User;

// ===================================================================

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  void Swap(User* other);

  // implements Message ----------------------------------------------

  inline User* New() const { return New(NULL); }

  User* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // optional int64 access_hash = 2;
  void clear_access_hash();
  static const int kAccessHashFieldNumber = 2;
  ::google::protobuf::int64 access_hash() const;
  void set_access_hash(::google::protobuf::int64 value);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string nick = 4;
  void clear_nick();
  static const int kNickFieldNumber = 4;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // optional .zproto.Avatar avatar = 5;
  bool has_avatar() const;
  void clear_avatar();
  static const int kAvatarFieldNumber = 5;
  const ::zproto::Avatar& avatar() const;
  ::zproto::Avatar* mutable_avatar();
  ::zproto::Avatar* release_avatar();
  void set_allocated_avatar(::zproto::Avatar* avatar);

  // map<string, .zproto.RawArrayValue> ext = 6;
  int ext_size() const;
  void clear_ext();
  static const int kExtFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::zproto::RawArrayValue >&
      ext() const;
  ::google::protobuf::Map< ::std::string, ::zproto::RawArrayValue >*
      mutable_ext();

  // @@protoc_insertion_point(class_scope:zproto.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::int64 access_hash_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::zproto::Avatar* avatar_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::zproto::RawArrayValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      User_ExtEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::zproto::RawArrayValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > ext_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_users_2eproto();
  friend void protobuf_AssignDesc_users_2eproto();
  friend void protobuf_ShutdownFile_users_2eproto();

  void InitAsDefaultInstance();
  static User* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// User

// optional string uid = 1;
inline void User::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::uid() const {
  // @@protoc_insertion_point(field_get:zproto.User.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.User.uid)
}
inline void User::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.User.uid)
}
inline void User::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.User.uid)
}
inline ::std::string* User::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:zproto.User.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_uid() {
  // @@protoc_insertion_point(field_release:zproto.User.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:zproto.User.uid)
}

// optional int64 access_hash = 2;
inline void User::clear_access_hash() {
  access_hash_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 User::access_hash() const {
  // @@protoc_insertion_point(field_get:zproto.User.access_hash)
  return access_hash_;
}
inline void User::set_access_hash(::google::protobuf::int64 value) {
  
  access_hash_ = value;
  // @@protoc_insertion_point(field_set:zproto.User.access_hash)
}

// optional string name = 3;
inline void User::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::name() const {
  // @@protoc_insertion_point(field_get:zproto.User.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.User.name)
}
inline void User::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.User.name)
}
inline void User::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.User.name)
}
inline ::std::string* User::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:zproto.User.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:zproto.User.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zproto.User.name)
}

// optional string nick = 4;
inline void User::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::nick() const {
  // @@protoc_insertion_point(field_get:zproto.User.nick)
  return nick_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.User.nick)
}
inline void User::set_nick(const char* value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.User.nick)
}
inline void User::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.User.nick)
}
inline ::std::string* User::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:zproto.User.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_nick() {
  // @@protoc_insertion_point(field_release:zproto.User.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:zproto.User.nick)
}

// optional .zproto.Avatar avatar = 5;
inline bool User::has_avatar() const {
  return !_is_default_instance_ && avatar_ != NULL;
}
inline void User::clear_avatar() {
  if (GetArenaNoVirtual() == NULL && avatar_ != NULL) delete avatar_;
  avatar_ = NULL;
}
inline const ::zproto::Avatar& User::avatar() const {
  // @@protoc_insertion_point(field_get:zproto.User.avatar)
  return avatar_ != NULL ? *avatar_ : *default_instance_->avatar_;
}
inline ::zproto::Avatar* User::mutable_avatar() {
  
  if (avatar_ == NULL) {
    avatar_ = new ::zproto::Avatar;
  }
  // @@protoc_insertion_point(field_mutable:zproto.User.avatar)
  return avatar_;
}
inline ::zproto::Avatar* User::release_avatar() {
  // @@protoc_insertion_point(field_release:zproto.User.avatar)
  
  ::zproto::Avatar* temp = avatar_;
  avatar_ = NULL;
  return temp;
}
inline void User::set_allocated_avatar(::zproto::Avatar* avatar) {
  delete avatar_;
  avatar_ = avatar;
  if (avatar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zproto.User.avatar)
}

// map<string, .zproto.RawArrayValue> ext = 6;
inline int User::ext_size() const {
  return ext_.size();
}
inline void User::clear_ext() {
  ext_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::zproto::RawArrayValue >&
User::ext() const {
  // @@protoc_insertion_point(field_map:zproto.User.ext)
  return ext_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::zproto::RawArrayValue >*
User::mutable_ext() {
  // @@protoc_insertion_point(field_mutable_map:zproto.User.ext)
  return ext_.MutableMap();
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_users_2eproto__INCLUDED
